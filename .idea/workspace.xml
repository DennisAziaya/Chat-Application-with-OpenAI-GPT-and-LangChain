<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="42320aee-4139-49bb-8757-55b462657795" name="Changes" comment="Integrate langchain library for building a Question-Answering system using the RetrievalQA chain. Configure ChatOpenAI and OpenAIEmbeddings instances, set up a Chroma vector store, and initialize a RedundantFilterRetriever for filtering redundant information. Run a sample query through the RetrievalQA chain and print the response. Define a custom retriever class, RedundantFilterRetriever, that extends BaseRetriever from langchain. The class includes attributes for embeddings and Chroma vector store. Implement a method to retrieve relevant documents based on a query using embeddings and Chroma. Provide an asynchronous version of the method with an empty implementation for future enhancements. Implement script for visualizing L2 distances of embedded words" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2aScl8O6dbhQPQdLTqERDqlV6Rk" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "com.google.cloudcode.ide_session_index": "20240108_0000",
    "git-widget-placeholder": "main",
    "last_opened_file_path": "E:/playground/ai/chatapp/Chat-Application-with-OpenAI-GPT-and-LangChain",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "preferences.pluginManager",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="E:\playground\ai\chatapp\Chat-Application-with-OpenAI-GPT-and-LangChain" />
    </key>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-python-sdk-67fca87a943a-c986f194a52a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.11799.259" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="42320aee-4139-49bb-8757-55b462657795" name="Changes" comment="" />
      <created>1704315576805</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1704315576805</updated>
      <workItem from="1704315579299" duration="2659000" />
      <workItem from="1704395005787" duration="8729000" />
      <workItem from="1704446846509" duration="552000" />
      <workItem from="1704736380721" duration="747000" />
    </task>
    <task id="LOCAL-00001" summary="Implement text loading and splitting functionality">
      <option name="closed" value="true" />
      <created>1704316509731</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1704316509731</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: Implement document processing and similarity search&#10;&#10;Introduce functionality to process documents, split them into chunks, and perform&#10;a similarity search using OpenAI embeddings. This includes the use of TextLoader&#10;for loading and splitting text, CharacterTextSplitter for chunking, OpenAIEmbeddings&#10;for obtaining document embeddings, and Chroma for creating a vector store.">
      <option name="closed" value="true" />
      <created>1704318217869</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1704318217869</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: Implement document processing and similarity search&#10;&#10;Introduce functionality to process documents, split them into chunks, and perform&#10;a similarity search using OpenAI embeddings. This includes the use of TextLoader&#10;for loading and splitting text, CharacterTextSplitter for chunking, OpenAIEmbeddings&#10;for obtaining document embeddings, and Chroma for creating a vector store.">
      <option name="closed" value="true" />
      <created>1704318251271</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1704318251271</updated>
    </task>
    <task id="LOCAL-00004" summary="Integrate langchain library for building a Question-Answering system using the RetrievalQA chain. Configure ChatOpenAI and OpenAIEmbeddings instances, set up a Chroma vector store, and initialize a RedundantFilterRetriever for filtering redundant information. Run a sample query through the RetrievalQA chain and print the response. Define a custom retriever class, RedundantFilterRetriever, that extends BaseRetriever from langchain. The class includes attributes for embeddings and Chroma vector store. Implement a method to retrieve relevant documents based on a query using embeddings and Chroma. Provide an asynchronous version of the method with an empty implementation for future enhancements. Implement script for visualizing L2 distances of embedded words">
      <option name="closed" value="true" />
      <created>1704404652246</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1704404652246</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Implement text loading and splitting functionality" />
    <MESSAGE value="feat: Implement document processing and similarity search&#10;&#10;Introduce functionality to process documents, split them into chunks, and perform&#10;a similarity search using OpenAI embeddings. This includes the use of TextLoader&#10;for loading and splitting text, CharacterTextSplitter for chunking, OpenAIEmbeddings&#10;for obtaining document embeddings, and Chroma for creating a vector store." />
    <MESSAGE value="Integrate langchain library for building a Question-Answering system using the RetrievalQA chain. Configure ChatOpenAI and OpenAIEmbeddings instances, set up a Chroma vector store, and initialize a RedundantFilterRetriever for filtering redundant information. Run a sample query through the RetrievalQA chain and print the response. Define a custom retriever class, RedundantFilterRetriever, that extends BaseRetriever from langchain. The class includes attributes for embeddings and Chroma vector store. Implement a method to retrieve relevant documents based on a query using embeddings and Chroma. Provide an asynchronous version of the method with an empty implementation for future enhancements. Implement script for visualizing L2 distances of embedded words" />
    <option name="LAST_COMMIT_MESSAGE" value="Integrate langchain library for building a Question-Answering system using the RetrievalQA chain. Configure ChatOpenAI and OpenAIEmbeddings instances, set up a Chroma vector store, and initialize a RedundantFilterRetriever for filtering redundant information. Run a sample query through the RetrievalQA chain and print the response. Define a custom retriever class, RedundantFilterRetriever, that extends BaseRetriever from langchain. The class includes attributes for embeddings and Chroma vector store. Implement a method to retrieve relevant documents based on a query using embeddings and Chroma. Provide an asynchronous version of the method with an empty implementation for future enhancements. Implement script for visualizing L2 distances of embedded words" />
  </component>
</project>